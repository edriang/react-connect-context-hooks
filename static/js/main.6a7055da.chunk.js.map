{"version":3,"sources":["counter/provider/counterActions.ts","counter/provider/counterReducer.ts","counter/provider/CounterProvider.tsx","counter/Counter.tsx","counter/useCountLogger.ts","App.tsx","index.tsx"],"names":["ACTIONS","reducer","state","action","amount","payload","type","count","actions","incrementAction","dispatch","decrementAction","createContextProvider","counterReducer","CounterProvider","CounterContext","withCounter","connectContextFactory","useCounter","useConnectedContextFactory","increment","decrement","React","useState","setAmount","stateMappers","console","warn","useCountLogger","value","onChange","event","parseInt","target","onClick","actionMappers","App","className","ReactDOM","render","document","getElementById"],"mappings":"0PAAMA,EACS,YADTA,EAES,YCqBAC,MAbf,SAAiBC,EAAYC,GAAc,IAC/BC,EAAWD,EAAOE,QAAlBD,OAER,OAAQD,EAAOG,MACX,KAAKN,EACD,OAAO,eAAKE,EAAZ,CAAmBK,MAAOL,EAAMK,MAAQH,IAC5C,KAAKJ,EACD,OAAO,eAAKE,EAAZ,CAAmBK,MAAOL,EAAMK,MAAQH,IAC5C,QACI,OAAOF,I,OCdbM,EAAU,CACZC,gBFDoB,SAACC,GAAD,OAAmB,SAACN,GACxCM,EAAS,CACLJ,KAAMN,EACNK,QAAS,CAAED,cEDfO,gBFKoB,SAACD,GAAD,OAAmB,SAACN,GACxCM,EAAS,CACLJ,KAAMN,EACNK,QAAS,CAAED,e,EELuBQ,YAAsBC,EDJ7B,CAC/BN,MAAO,GCGmFC,G,mBAAvFM,E,KAAiBC,E,KAElBC,EAAcC,YAAsBF,GACpCG,EAAaC,YAA2BJ,GAE/BD,IC2BAE,KA/ByB,SAAC,GAAqC,IAAnCT,EAAkC,EAAlCA,MAAOa,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC7CC,IAAMC,SAAS,GAD8B,mBAClEnB,EADkE,KAC1DoB,EAD0D,KASzE,OClBW,WAAO,IACVjB,EAAUW,EAAW,CAC3BO,aAAc,CAAC,WADTlB,MAIRmB,QAAQC,KAAR,oBAA0BpB,IDW1BqB,GAGI,6BACI,iDACA,2BACI,sCACA,2BAAOtB,KAAK,SAASuB,MAAOzB,EAAQ0B,SAX3B,SAACC,GAClBP,EAAUQ,SAASD,EAAME,OAAOJ,YAY5B,2BACI,sCACA,8BAAOtB,IAEX,6BACA,4BAAQ2B,QAAS,kBAAMb,EAAUjB,KAAjC,aACA,4BAAQ8B,QAAS,kBAAMd,EAAUhB,KAAjC,gBASwB,CAChCqB,aAAc,CAAC,SACfU,cAAe,CAAC,4BAA6B,+BE1BlCC,EAZO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,UCNVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6a7055da.chunk.js","sourcesContent":["const ACTIONS = {\n    INCREMENT: 'INCREMENT',\n    DECREMENT: 'DECREMENT',\n};\n\nconst incrementAction = (dispatch: any) => (amount: number) => {\n    dispatch({\n        type: ACTIONS.INCREMENT,\n        payload: { amount },\n    });\n}\n\nconst decrementAction = (dispatch: any) => (amount: number) => {\n    dispatch({\n        type: ACTIONS.DECREMENT,\n        payload: { amount },\n    });\n}\n\nexport {\n    ACTIONS,\n    incrementAction,\n    decrementAction,\n};\n","import { ACTIONS } from './counterActions';\n\ntype CounterState = {\n    count: number;\n}\n\nconst initialState: CounterState = {\n    count: 0,\n};\n\nfunction reducer(state: any, action: any) {\n    const { amount } = action.payload;\n\n    switch (action.type) {\n        case ACTIONS.INCREMENT:\n            return { ...state, count: state.count + amount };\n        case ACTIONS.DECREMENT:\n            return { ...state, count: state.count - amount };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\nexport {\n    initialState,\n};\n","import counterReducer, { initialState } from './counterReducer';\nimport { incrementAction, decrementAction } from './counterActions';\n\nimport createContextProvider, { connectContextFactory, useConnectedContextFactory } from 'react-connect-context-hooks';\n\nconst actions = {\n    incrementAction,\n    decrementAction,\n}\n\nconst [CounterProvider, CounterContext] = createContextProvider(counterReducer, initialState, actions);\n\nconst withCounter = connectContextFactory(CounterContext);\nconst useCounter = useConnectedContextFactory(CounterContext);\n\nexport default CounterProvider;\nexport {\n    withCounter,\n    useCounter,\n};\n","import React from 'react';\n\nimport { withCounter } from './provider';\nimport useCountLogger from './useCountLogger';\n\ntype CounterProps = {\n    count: number;\n    increment: (amount: number) => void;\n    decrement: (amount: number) => void;\n}\n\nconst Counter: React.FC<CounterProps> = ({ count, increment, decrement }) => {\n    const [amount, setAmount] = React.useState(1);\n\n    const updateAmount = (event: any) => {\n        setAmount(parseInt(event.target.value));\n    }\n\n    useCountLogger();\n\n    return (\n        <div>\n            <h1>Counter Component</h1>\n            <p>\n                <b>Amount:</b>\n                <input type=\"number\" value={amount} onChange={updateAmount} />\n            </p>\n            <p>\n                <b>Count: </b>\n                <span>{count}</span>\n            </p>\n            <hr />\n            <button onClick={() => decrement(amount)}>Decrement</button>\n            <button onClick={() => increment(amount)}>Increment</button>\n        </div>\n    )\n}\n\nexport {\n    Counter,\n}\n\nexport default withCounter(Counter, {\n    stateMappers: ['count'],\n    actionMappers: ['increment:incrementAction', 'decrement:decrementAction'],\n});\n","import { useCounter } from './provider';\n\nexport default () => {\n    const { count } = useCounter({\n      stateMappers: ['count'],\n    });\n  \n    console.warn(`Count is: ${count}`);\n}\n","import React from 'react';\nimport './App.css';\n\nimport CounterProvider from './counter/provider';\nimport Counter from './counter/Counter';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CounterProvider>\n          <Counter />\n        </CounterProvider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}